Commands used in the Kibana console to deal with Elasticsearch, including necessary Elasticsearch mappings and settings.

MAPPINGS & SETTINGS

PUT allants/_settings
{
  "index" : { "max_result_window" : 500000 }
}

PUT allants6
{
 "mappings": {
  "_doc": {
     "properties": {
  "antwebTaxonName": {"type": "keyword"},
	"basisOfRecord": {"type": "text"},
	"biogeographicregion": {"type": "keyword"},
	"bioregion": {"type": "keyword"},
	"caste": {"type": "keyword"},
	"classVal": {"type": "keyword"},
	"code": {"type": "keyword"},
	"collectedby": {"type": "text"},
	"collectionCode": {"type": "keyword"},
	"country": {"type": "keyword"},
	"dateCollected": {"type": "text"},
	"dateCollectedEnd": {"type": "date", "ignore_malformed" : true},
	"dateCollectedStart": {"type": "date", "ignore_malformed" : true},
	"dateIdentified": {"type": "text"},
	"dateDetermined": {"type": "date", "ignore_malformed" : true},
	"decimalLatitude": {"type": "float"},
	"decimalLongitude": {"type": "float"},
	"family": {"type": "keyword"},
	"fieldNotes": {"type": "text"},
	"fieldNumber": {"type": "keyword"},
	"fossil": {"type": "boolean"},
	"genus": {"type": "keyword"},
	"geo": {"properties": {"coordinates": {"type": "geo_point", "ignore_malformed" : true}}},
	"georeferenceRemarks": {"type": "text"},
	"habitat": {"type": "text"},
	"habitats": {"type": "text"},
	"identifiedBy": {"type": "text"},
	"imageCount": {"type": "byte"},
	"institutionCode": {"type": "keyword"},
	"intraspecificEpithet": {"type": "keyword"},
	"kingdom": {"type": "keyword"},
	"locality": {"type": "text"},
	"locatedat": {"type": "keyword"},
	"locationRemark": {"type": "text"},
	"microhabitat": {"type": "keyword"},
	"minimumEleationInMeters": {"type": "integer"},
	"museum": {"type": "keyword"},
	"nomenclaturalCode": {"type": "keyword"},
	"occurrenceId": {"type": "text"},
	"occurrenceRemarks": {"type": "text"},
	"order": {"type": "keyword"},
	"ownedby": {"type": "keyword"},
	"ownerInstitutionCode": {"type": "keyword"},
	"phylum": {"type": "keyword"},
	"preparations": {"type": "text"},
	"recordedBy": {"type": "text"},
	"samplingProtocol": {"type": "text"},
	"scientificName": {"type": "keyword"},
	"sex": {"type": "text"},
	"specificEpithet": {"type": "keyword"},
	"stateProvince": {"type": "keyword"},
	"status": {"type": "keyword"},
	"subfamily": {"type": "keyword"},
	"subgenus": {"type": "keyword"},
	"type": {"type": "text"},
	"verbatimEventDate": {"type": "text"},
	"sortingid": {"type": "integer"},
	"microhabitatInferred": {"type": "keyword"},
	"solar": {"type": "float"},
	"uvB": {"type": "float"},
	"temperature": {"type": "float"},
	"pixUsed": {"type": "integer"},
	"pixSD": {"type": "float"},
	"saturation": {"type": "float"},
	"lightness": {"type": "float"},
	"value" : {"type": "float"},
	"red": {"type": "float"},
	"green": {"type": "float"},
	"blue": {"type": "float"},
	"rednessHSV" : {"type": "float"}, 
	"orangenessHSV" : {"type": "float"},
	"yellownessHSV" : {"type": "float"},
	"brownnessHSV" : {"type": "float"},
	"darkbrownnessHSV" : {"type": "float"},
	"blacknessHSV": {"type": "float"},
	"rednessRGB" : {"type": "float"}, 
	"orangenessRGB" : {"type": "float"},
	"yellownessRGB" : {"type": "float"},
	"brownnessRGB" : {"type": "float"},
	"darkbrownnessRGB" : {"type": "float"},
	"blacknessRGB": {"type": "float"}
     }
    }
     }
	}


USEFUL SEARCHES AND FUNCTIONS

GET /allants2/_search 
{
  "query" : { 
  "match" : {
        "genus" : "Pheidole"
    }
  }
}

GET /allants2/_search 
{
  
  "query" : {
    "match_all" : { }
  },
  "sort": [
    {
      "saturation": {
        "order": "desc"
      }
    }
  ],
  "size": 10
}

POST _reindex
{
  "source": {
    "index": "allants4"
  },
  "dest": {
    "index": "allants6"
  }
}

GET /allants5/_search 
{ "size": 50000,
  "query": {"match_all": {}}, "_source": ["microhabitat"]
}

PUT allants6/_settings
{
  "index" : { "max_result_window" : 500000 }
}

DELETE allants7
GET allants/_mapping
GET allants6/_search 
{ 
  "query": { "match_all": {} }
}
GET speciessubset4/_search 
{ 
  "from": 0,
  "size": 10000, 
  "query": { "match_all": {} }
}
DELETE allants4
GET allants4/_search 
{ 
  "sort" : [
        { "sortingid" : {"order" : "desc"}},
        "_score"
    ],
  "from": 0,
  "size": 50000, 
  "query": { "match_all": {} }
}

GET allants5/_search
{
  "size": 50000,
  "query": {"exists" : { "field" : "microhabitat"}
  }
}